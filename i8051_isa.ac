/**
 * @file      file?
 * @author    Tiago Sampaio Lins
 *            Silvio Veloso
 *
 *            The ArchC Team
 *            http://www.archc.org/
 *
 *            Computer Systems Laboratory (LSC)
 *            IC-UNICAMP
 *            http://www.lsc.ic.unicamp.br/
 *
 * @version   version?
 * @date      date?
 * 
 * @brief     The ArchC i8051 functional model.
 * 
 * @attention Copyright (C) 2002-2006 --- The ArchC Team
 *
 */
 
AC_ISA(i8051)
{
 ac_helper
 {
  sc_uint<17> pc;
  int reg_indx;
  unsigned long pc_stability;
  unsigned long old_pc;
  unsigned long curr_pc;
 };

 ac_format Type_3bytes = "%op:8 %byte2:8 %byte3:8";
 ac_format Type_2bytes = "%op:8 %byte2:8";
 ac_format Type_OP_R = "%op1:5 %reg:3";
 ac_format Type_IBRCH = "%page:3 %op2:5 %addr0:8";
 ac_format Type_1byte = "%op:8";
 ac_format Type_3bytesReg = "%op3:5 %reg2:3 %data:8 %reladd:8";
 ac_format Type_2bytesReg = "%op3:5 %reg2:3 %addr:8";


 ac_instr<Type_OP_R> add_ar, addc_ar, anl_ar, dec_r, inc_r, mov_ar, mov_ra, orl_ar,
                     subb_ar, xch_ar, xrl_ar;
 ac_instr<Type_IBRCH> acall, ajmp;
 ac_instr<Type_3bytes> anl_iram_data, cjne_addr, cjne_data, cjne_arr_R0, cjne_arr_R1,
                       djnz_iram_reladd, jb, jbc, jnb, lcall, ljmp, mov_iram_iram,
                       mov_iram_data, mov_dptr_data, orl_iram_data, xrl_iram_data;
 ac_instr<Type_2bytes> add_a_data, add_a_iram, addc_a_data, addc_a_iram, anl_a_iram,
                       anl_a_data, anl_iram_a, anl_c_bit, anl_c_nbit, clr_bit, cpl_bit,
                       dec_iram, inc_iram, jc, jnc, jnz, jz, mov_a_iram, mov_a_data,
                       mov_iram_a, mov_iram_arr_R0, mov_iram_arr_R1, mov_arr_R0_iram,
                       mov_arr_R1_iram, mov_arr_R0_data, mov_arr_R1_data, mov_c_bit,
                       mov_bit_c, orl_a_iram, orl_a_data, orl_iram_a, orl_c_bit,
                       orl_c_nbit, pop, push, setb_bit, sjmp, subb_a_iram, subb_a_data,
                       xch_a_iram, xrl_a_iram, xrl_a_data, xrl_iram_a;
 ac_instr<Type_1byte> add_arr_R0, add_arr_R1, addc_arr_R0, addc_arr_R1, anl_arr_R0,
                      anl_arr_R1, clr_a, clr_c, cpl_a, cpl_c, da, dec_a, dec_arr_R0,
                      dec_arr_R1, div, inc_a, inc_arr_R0, inc_arr_R1, inc_dptr, jmp,
                      mov_a_arr_R0, mov_a_arr_R1, mov_arr_R0_a, mov_arr_R1_a, movc_dptr,
                      movc_pc, movx_a_R0, movx_a_R1, movx_a_dptr, movx_r0_a, movx_r1_a,
                      movx_dptr_a, mul, nop, orl_arr_R0, orl_arr_R1, ret, reti, rl_a,
                      rlc_a, rr_a, rrc_a, setb_c, subb_a_arr_R0, subb_a_arr_R1, swap,
                      xch_arr_R0, xch_arr_R1, xchd_R0, xchd_R1, xrl_arr_R0, xrl_arr_R1;
 ac_instr<Type_3bytesReg> cjne_r;
 ac_instr<Type_2bytesReg> djnz_r, mov_r_iram, mov_r_data, mov_iram_r;



  ISA_CTOR(i8051){

    da.set_asm("da a");
    da.set_decoder(op=0xD4);

    reti.set_asm("reti");
    reti.set_decoder(op=0x32);

    movx_a_R1.set_asm("MOVX A, @R1");
    movx_a_R1.set_decoder(op=0xE3);    
		
    movx_a_dptr.set_asm("MOVX A, @DPTR");
    movx_a_dptr.set_decoder(op=0xE0);

    movx_a_R0.set_asm("MOVX A, @R0");
    movx_a_R0.set_decoder(op=0xE2);

    movx_dptr_a.set_asm("movx @DPTR, A");
    movx_dptr_a.set_decoder(op=0xF0);

    movx_r0_a.set_asm("movx @R0, A");
    movx_r0_a.set_decoder(op=0xF2);

    movx_r1_a.set_asm("movx @R1, A");
    movx_r1_a.set_decoder(op=0xF3);

    movc_pc.set_asm("movc A, @A+PC");
    movc_pc.set_decoder(op=0x83);
		
    jb.set_asm("jb %byte2, %byte3");
    jb.set_decoder(op=0x20);

    jnb.set_asm("jnb %byte2, %byte3");
    jnb.set_decoder(op=0x30);

    jbc.set_asm("jbc %byte2, %byte3");
    jbc.set_decoder(op=0x10);

    jc.set_asm("jc %byte2");
    jc.set_decoder(op=0x40);

    jnc.set_asm("jnc %byte2");
    jnc.set_decoder(op=0x50);

    jmp.set_asm("jmp");
    jmp.set_decoder(op=0x73);

    jz.set_asm("jz %byte2");
    jz.set_decoder(op=0x60);

    jnz.set_asm("jnz %byte2");
    jnz.set_decoder(op=0x70);

    nop.set_asm("nop");
    nop.set_decoder(op=0x00);

    setb_c.set_asm("setb C");
    setb_c.set_decoder(op=0xD3);

    swap.set_asm("swap A");
    swap.set_decoder(op=0xC4);

    xchd_R0.set_asm("xchd A, @R0");
    xchd_R0.set_decoder(op=0xD6);
 
    xchd_R1.set_asm("xchd A, @R1");
    xchd_R1.set_decoder(op=0xD7);

    subb_a_arr_R0.set_asm("subb A, @R0");
    subb_a_arr_R0.set_decoder(op=0x96);
 
    subb_a_arr_R1.set_asm("subb A, @R1");
    subb_a_arr_R1.set_decoder(op=0x97);

    xch_arr_R0.set_asm("xch A, @R0");
    xch_arr_R0.set_decoder(op=0xC6);
 
    xch_arr_R1.set_asm("xch A, @R1");
    xch_arr_R1.set_decoder(op=0xC7);

    setb_bit.set_asm("setb %byte2");
    setb_bit.set_decoder(op=0xD2);
 
    sjmp.set_asm("sjmp %byte2");
    sjmp.set_decoder(op=0x80);

    subb_a_data.set_asm("subb A, %byte2");
    subb_a_data.set_decoder(op=0x94);

    subb_a_iram.set_asm("subb A, %byte2");
    subb_a_iram.set_decoder(op=0x95);

    xch_a_iram.set_asm("xch A, %byte2");
    xch_a_iram.set_decoder(op=0xC5);

    lcall.set_asm("lcall %byte2%byte3");
    lcall.set_decoder(op=0x12);

    ljmp.set_asm("ljmp %byte2%byte3");
    ljmp.set_decoder(op=0x02);

    djnz_iram_reladd.set_asm("djnz %byte2, %byte3");
    djnz_iram_reladd.set_decoder(op=0xD5);

    djnz_r.set_asm("djnz %reg2, %addr");
    djnz_r.set_decoder(op3=0x1B);
 
    add_ar.set_asm("add A, %reg");
    add_ar.set_decoder(op1=0x05);
 
    add_a_data.set_asm("add A, %byte2");
    add_a_data.set_decoder(op=0x24);

    add_a_iram.set_asm("add A, %byte2");
    add_a_iram.set_decoder(op=0x25);
 
    add_arr_R0.set_asm("add A, @R0");
    add_arr_R0.set_decoder(op=0x26);

    add_arr_R1.set_asm("add A, @R1");
    add_arr_R1.set_decoder(op=0x27);

    addc_ar.set_asm("addc A, %reg");
    addc_ar.set_decoder(op1=0x07);
 
    addc_a_data.set_asm("addc A, %byte2");
    addc_a_data.set_decoder(op=0x34);

    addc_a_iram.set_asm("addc A, %byte2");
    addc_a_iram.set_decoder(op=0x35);

    addc_arr_R0.set_asm("addc A, @R0");
    addc_arr_R0.set_decoder(op=0x36);

    addc_arr_R1.set_asm("addc A, @R1");
    addc_arr_R1.set_decoder(op=0x37);

    subb_ar.set_asm("subb A, %reg");
    subb_ar.set_decoder(op1=0x13);

    mov_arr_R0_data.set_asm("mov @R0, %byte2");
    mov_arr_R0_data.set_decoder(op=0x76);

    mov_arr_R1_data.set_asm("mov @R1, %byte2");
    mov_arr_R1_data.set_decoder(op=0x77);

    mov_arr_R0_a.set_asm("mov @R0, A");
    mov_arr_R0_a.set_decoder(op=0xF6);

    mov_arr_R1_a.set_asm("mov @R1, A");
    mov_arr_R1_a.set_decoder(op=0xF7);

    mov_arr_R0_iram.set_asm("mov @R0, %byte2");
    mov_arr_R0_iram.set_decoder(op=0xA6);

    mov_arr_R1_iram.set_asm("mov @R1, %byte2");
    mov_arr_R1_iram.set_decoder(op=0xA7);

    mov_iram_arr_R0.set_asm("mov %byte2, @R0");
    mov_iram_arr_R0.set_decoder(op=0x86);

    mov_iram_arr_R1.set_asm("mov %byte2, @R1");
    mov_iram_arr_R1.set_decoder(op=0x87);

    mov_a_data.set_asm("mov A, %byte2");
    mov_a_data.set_decoder(op=0x74);

    mov_a_arr_R0.set_asm("mov A, @R0");
    mov_a_arr_R0.set_decoder(op=0xE6);

    mov_a_arr_R1.set_asm("mov A, @R1");
    mov_a_arr_R1.set_decoder(op=0xE7);

    mov_ar.set_asm("mov A, %reg");
    mov_ar.set_decoder(op1=0x1D);

    mov_a_iram.set_asm("mov A, %byte2");
    mov_a_iram.set_decoder(op=0xE5);

    mov_iram_a.set_asm("mov %byte2, A");
    mov_iram_a.set_decoder(op=0xF5);

    mov_c_bit.set_asm("mov C, %byte2");
    mov_c_bit.set_decoder(op=0xA2);

    mov_bit_c.set_asm("mov %byte2, C");
    mov_bit_c.set_decoder(op=0x92);

    mov_dptr_data.set_asm("mov dptr, %byte2%byte3");
    mov_dptr_data.set_decoder(op=0x90);

    mov_r_data.set_asm("mov %reg2, %addr");
    mov_r_data.set_decoder(op3=0x0F);

    mov_r_iram.set_asm("mov %reg2, %addr");
    mov_r_iram.set_decoder(op3=0x15);

    mov_iram_r.set_asm("mov %addr, %reg2");
    mov_iram_r.set_decoder(op3 = 0x11);

    mov_iram_data.set_asm("mov %byte2, %byte3");
    mov_iram_data.set_decoder(op=0x75);
 
    mov_ra.set_asm("mov %reg, A");
    mov_ra.set_decoder(op1=0x1F);

    movc_dptr.set_asm("movc A, @A+DPTR");
    movc_dptr.set_decoder(op=0x93);

    acall.set_asm("acall %addr0");
    acall.set_decoder(op2 = 0x11);
 
    ajmp.set_asm("ajmp %addr0");
    ajmp.set_decoder(op2 = 0x01);
 
    cjne_data.set_asm("cjne A,%byte2,%byte3");
    cjne_data.set_decoder(op = 0xB4);
 
    cjne_addr.set_asm("cjne A,%byte2,%byte3");
    cjne_addr.set_decoder(op = 0xB5);

    cjne_arr_R0.set_asm("cjne @R0,%byte2,%byte3");
    cjne_arr_R0.set_decoder(op = 0xB6);

    cjne_arr_R1.set_asm("cjne @R1,%byte2,%byte3");
    cjne_arr_R1.set_decoder(op = 0xB7);
 
    cjne_r.set_asm("cjne %reg2,%data,%reladd");
    cjne_r.set_decoder(op3 = 0x17);

    clr_bit.set_asm("clr %byte2");
    clr_bit.set_decoder(op = 0xC2);

    clr_c.set_asm("clr C");
    clr_c.set_decoder(op = 0xC3);
 
    clr_a.set_asm("clr A");
    clr_a.set_decoder(op = 0xE4);

    pop.set_asm("pop %byte2");
    pop.set_decoder(op = 0xD0);
 
    push.set_asm("push %byte2");
    push.set_decoder(op = 0xC0);

    anl_iram_a.set_asm("anl A,%byte2");
    anl_iram_a.set_decoder(op = 0x52);

    orl_iram_a.set_asm("orl A,%byte2");
    orl_iram_a.set_decoder(op = 0x42);
 
    xrl_iram_a.set_asm("xrl A,%byte2");
    xrl_iram_a.set_decoder(op = 0x62);
 
    anl_iram_data.set_asm("anl %byte2,%byte3");
    anl_iram_data.set_decoder(op = 0x53);
 
    orl_iram_data.set_asm("orl %byte2,%byte3");
    orl_iram_data.set_decoder(op = 0x43);

    xrl_iram_data.set_asm("xrl %byte2,%byte3");
    xrl_iram_data.set_decoder(op = 0x63);

    anl_a_data.set_asm("anl A,%byte2");
    anl_a_data.set_decoder(op = 0x54);

    orl_a_data.set_asm("orl A,%byte2");
    orl_a_data.set_decoder(op = 0x44);

    xrl_a_data.set_asm("xrl A,%byte2");
    xrl_a_data.set_decoder(op = 0x64);

    anl_a_iram.set_asm("anl A,%byte2");
    anl_a_iram.set_decoder(op = 0x55);

    orl_a_iram.set_asm("orl A,%byte2");
    orl_a_iram.set_decoder(op = 0x45);

    xrl_a_iram.set_asm("xrl A,%byte2");
    xrl_a_iram.set_decoder(op = 0x65);

    anl_ar.set_asm("anl A,%reg");
    anl_ar.set_decoder(op1 = 0x0B);

    orl_ar.set_asm("orl A,%reg");
    orl_ar.set_decoder(op1 = 0x09);

    xrl_ar.set_asm("xrl A,%reg");
    xrl_ar.set_decoder(op1 = 0x0D);

    xch_ar.set_asm("xch A,%reg");
    xch_ar.set_decoder(op1 = 0x19);

    anl_arr_R0.set_asm("anl A,@R0");
    anl_arr_R0.set_decoder(op = 0x56);

    anl_arr_R1.set_asm("anl A,@R1");
    anl_arr_R1.set_decoder(op = 0x57);

    orl_arr_R0.set_asm("orl A,@R0");
    orl_arr_R0.set_decoder(op = 0x46);

    orl_arr_R1.set_asm("orl A,@R1");
    orl_arr_R1.set_decoder(op = 0x47);

    xrl_arr_R0.set_asm("xrl A,@R0");
    xrl_arr_R0.set_decoder(op = 0x66);

    xrl_arr_R1.set_asm("xrl A,@R1");
    xrl_arr_R1.set_decoder(op = 0x67);

    anl_c_bit.set_asm("anl C,%byte2");
    anl_c_bit.set_decoder(op = 0x82);

    anl_c_nbit.set_asm("anl C,%byte2");
    anl_c_nbit.set_decoder(op = 0xB0);

    orl_c_bit.set_asm("orl C,%byte2");
    orl_c_bit.set_decoder(op = 0x72);

    orl_c_nbit.set_asm("orl C,%byte2");
    orl_c_nbit.set_decoder(op = 0xA0);

    cpl_a.set_asm("cpl A");
    cpl_a.set_decoder(op = 0xF4);

    cpl_c.set_asm("cpl C");
    cpl_c.set_decoder(op = 0xB3);

    cpl_bit.set_asm("cpl %byte2");
    cpl_bit.set_decoder(op = 0xB2);

    inc_r.set_asm("inc %reg");
    inc_r.set_decoder(op1 = 0x01);

    inc_a.set_asm("inc A");
    inc_a.set_decoder(op = 0x04);

    inc_iram.set_asm("inc %byte2");
    inc_iram.set_decoder(op = 0x05);

    inc_arr_R0.set_asm("inc @R0");
    inc_arr_R0.set_decoder(op = 0x06);

    inc_arr_R1.set_asm("inc @R1");
    inc_arr_R1.set_decoder(op = 0x07);

    inc_dptr.set_asm("inc DPTR");
    inc_dptr.set_decoder(op = 0xA3);

    ret.set_asm("ret");
    ret.set_decoder(op = 0x22);

    rr_a.set_asm("rr A");
    rr_a.set_decoder(op = 0x03);

    rl_a.set_asm("rl A");
    rl_a.set_decoder(op = 0x23);

    rrc_a.set_asm("rrc A");
    rrc_a.set_decoder(op = 0x13);

    rlc_a.set_asm("rlc A");
    rlc_a.set_decoder(op = 0x33);

    dec_iram.set_asm("dec %byte2");
    dec_iram.set_decoder(op = 0x15);

    dec_a.set_asm("dec A");
    dec_a.set_decoder(op = 0x14);

    dec_arr_R0.set_asm("dec @R0");
    dec_arr_R0.set_decoder(op = 0x16);

    dec_arr_R1.set_asm("dec @R1");
    dec_arr_R1.set_decoder(op = 0x17);

    dec_r.set_asm("dec %reg");
    dec_r.set_decoder(op1 = 0x03);

    mul.set_asm("mul AB");
    mul.set_decoder(op = 0xA4);

    div.set_asm("div AB");
    div.set_decoder(op = 0x84);

    mov_iram_iram.set_asm("mov %byte2, %byte3");
    mov_iram_iram.set_decoder(op = 0x85);

  };

};
